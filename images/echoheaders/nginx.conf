events {
    worker_connections 1024;
}

env HOSTNAME;
env NODE_NAME;
env POD_NAME;
env POD_NAMESPACE;
env POD_IP;

http {
    default_type 'text/plain';
    # maximum allowed size of the client request body. By default this is 1m.
    # Request with bigger bodies nginx will return error code 413.
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
    client_max_body_size 10m;

    server {
        # please check the benefits of reuseport https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1
        # basically instructs to create an individual listening socket for each worker process (using the SO_REUSEPORT
        # socket option), allowing a kernel to distribute incoming connections between worker processes.
        listen 8080 default_server reuseport;

        # Replace '_' with your hostname.
        server_name _;

        location / {
            lua_need_request_body on;
            content_by_lua_block {
                ngx.header["Server"] = "echoserver"

                ngx.say("")
                ngx.say("")
                ngx.say("Hostname: ", os.getenv("HOSTNAME") or "N/A")
                ngx.say("")

                ngx.say("Pod Information:")
                if os.getenv("POD_NAME") then
                    ngx.say("\tnode name:\t ", os.getenv("NODE_NAME") or "N/A")
                    ngx.say("\tpod name:\t ", os.getenv("POD_NAME") or "N/A")
                    ngx.say("\tpod namespace:\t ", os.getenv("POD_NAMESPACE") or "N/A")
                    ngx.say("\tpod IP:  \t ", os.getenv("POD_IP") or "N/A")
                else
                    ngx.say("\t-no pod information available-")
                end

                ngx.say("")

                ngx.say("Server values:")
                ngx.say("\tserver_version=", "nginx: "..ngx.var.nginx_version.." - lua: "..ngx.config.ngx_lua_version)
                ngx.say("")

                ngx.say("Request Information:")
                ngx.say("\tclient_address=", ngx.var.remote_addr)
                ngx.say("\tmethod=", ngx.req.get_method())
                ngx.say("\treal path=", ngx.var.request_uri)
                ngx.say("\tquery=", ngx.var.query_string or "")
                ngx.say("\trequest_version=", ngx.req.http_version())
                ngx.say("\trequest_uri=", ngx.var.scheme.."://"..ngx.var.host..":"..ngx.var.server_port..ngx.var.request_uri)
                ngx.say("")

                ngx.say("Request Headers:")
                local headers = ngx.req.get_headers()
                local keys = {}
                for key, val in pairs(headers) do
                    table.insert(keys, key)
                end

                table.sort(keys)
                for i, key in ipairs(keys) do
                    ngx.say("\t", key, "=", headers[key])
                end
                ngx.say("")

                ngx.say("Request Body:")
                ngx.say(ngx.var.request_body or "\t-no body in request-");
                ngx.say("")
            }
        }
    }
}
