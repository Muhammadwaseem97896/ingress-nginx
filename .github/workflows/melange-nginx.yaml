# Adding/removing/modifying supported Nginx version(s)?
# Do a search of this file for the string "versionmod"
# for all the parts of this file which might need changes
# See also "ignored-versions" in version-check.yaml
# TODO: minimize the total number of these

on:
  push:
    branches:
      - main
      - melange

    # If README.md is generated by this job, do not re-run
    paths-ignore:
      - README.md

#  schedule:
#    - cron: '0 0 * * *'

  # Allow manually triggered workflows by maintainers without any
  # parameters to trigger a proactive rebuild (e.g. when a new
  # ingress.yaml lands)
  workflow_dispatch: {}

name: Create Release

# Don't run multiple releases concurrently.
concurrency: release

jobs:
  build:
    name: Release OCI image
    runs-on: ubuntu-latest

    outputs:
      # versionmod
      image-refs-1-19-10: ${{ steps.emit-refs.outputs.image-refs-1-19-10 }}

    strategy:
      matrix:
        # versionmod
        nginx-version: [1.19.10]
        include:
          - nginx-version: 1.19.10
            sha256: e8d0290ff561986ad7cd6c33307e12e11b137186c4403a6a5ccdb4914c082d88

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      id-token: write
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3
      - uses: sigstore/cosign-installer@main

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2.0.0

      - name: Melange build
        id: melange
        run: |
          cd images/nginx
          make melange
          make index

#      - id: ingress.yaml
#        uses: distroless/actions/ingress.yaml-snapshot@main
#        with:
#          config: ingress.yaml.yaml
#          base-tag: ghcr.io/${{ github.repository }}
#          keyring-append: /github/workspace/melange.rsa.pub
#          archs: x86_64,aarch64,armv7
#          additional-tags: ${{ matrix.nginx-version }}
#          image_refs: ingress.yaml.images
#
#      - name: Emit Image Refs output
#        id: emit-refs
#        run: |
#          # versionmod
#          versions="1.19.10"
#          echo "cat ingress.yaml.images | sed 's/\\$/\n/g' | grep -v '^\$' | jq -R -s -c 'split(\"\n\")[:-1]'" > refs-to-json.sh && chmod +x refs-to-json.sh
#          trap "rm -f refs-to-json.sh" EXIT
#          for version in ${versions//,/ }; do
#            if [[ "${version}" == "${{ matrix.nginx-version }}" ]]; then
#              key=image-refs-$(echo ${version} | sed 's|\.|-|g')
#              value=$(./refs-to-json.sh | sed 's|"|\\"|g')
#              echo ::set-output name=${key}::${value}
#              break
#            fi
#          done
#
#      - name: Smoke Test
#        run: |
#          IMAGE_NAME=$(docker load < output.tar | grep "Loaded image" | sed 's/^Loaded image: //')
#          IMAGE_NAME=$IMAGE_NAME ./test.sh
#
#      - name: Additional tags
#        uses: distroless/actions/tag@main
#        with:
#          distroless_image: ghcr.io/${{ github.repository }}:${{ matrix.nginx-version }}
#          docker_image_tag: ${{ matrix.nginx-version }}
#          docker_image: "nginx"
#
#      - if: ${{ failure() }}
#        name: Setup debug upterm session
#        uses: lhotari/action-upterm@v1
#
#  # Merge the JSON lists of images published in the build job into a single output
#  collect-image-refs:
#    name: Collect image refs
#    needs: build
#    runs-on: ubuntu-latest
#    outputs:
#      image-refs: ${{ steps.combine.outputs.image-refs }}
#    steps:
#      - name: Combine image refs across all versions
#        id: combine
#        run: |
#          rm -f image-refs-*.json
#
#          # versionmod
#          echo "${{ needs.build.outputs.image-refs-1-19-1 }}" > image-refs-1-19-1.json
#
#          jq -c -s '.[]=([.[]]|flatten)|.[0]' image-refs-*.json > image-refs-combined.json
#          echo "Combined image refs:"
#          echo "---------------------------"
#          cat image-refs-combined.json
#          echo "---------------------------"
#
#          echo ::set-output name=image-refs::$(cat image-refs-combined.json)
#          rm -f image-refs-*.json
#
#  scan:
#    name: Scan ingress.yaml images
#    needs: collect-image-refs
#    runs-on: ubuntu-latest
#
#    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
#    permissions:
#      id-token: write
#      packages: write
#      contents: read
#
#    strategy:
#      matrix:
#        ref: ${{ fromJson(needs.collect-image-refs.outputs.image-refs) }}
#    steps:
#      - run: |
#          echo ${{ matrix.ref }}

#      - uses: distroless/actions/vul-scans@main
#        id: scans
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ github.token }}
#          image: ${{ matrix.ref }}
#          RUN_SNYK: "false"
#          RUN_GRYPE: "false"
#          DOCKER_LOGIN: 'true'

#      - name: Image Vulnerability scan output
#        shell: bash
#        env:
#          SNYK_COUNT: ${{ steps.scans.outputs.SNYK_COUNT }}
#          GRYPE_COUNT: ${{ steps.scans.outputs.GRYPE_COUNT }}
#          TRIVY_COUNT: ${{ steps.scans.outputs.TRIVY_COUNT }}
#        run: |
#          echo "Image Vulnerability scan output" >> $GITHUB_STEP_SUMMARY
#          echo "Image ID: ${{ matrix.ref }}" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY
#          echo "Snyk Count: $SNYK_COUNT" >> $GITHUB_STEP_SUMMARY
#          echo "Grype Count: $GRYPE_COUNT" >> $GITHUB_STEP_SUMMARY
#          echo "Trivy Count: $TRIVY_COUNT" >> $GITHUB_STEP_SUMMARY

#  generate-readme:
#    name: Generate README
#    needs: scan
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write # Enable OIDC
#      contents: write
#    steps:
#      - name: Checkout source
#        uses: actions/checkout@v3
#      - name: Generate README
#        uses: distroless/readme-generator@main
#        with:
#          repo: https://github.com/distroless/nginx
#          name: nginx
#          location: distroless.dev/nginx
#          description: "A minimal nginx base image rebuilt every night from source."
#          exclude-tags: 1.20.2-r0,1.20.2,1.20,1.23.0
#          output-path: README-GENERATED.md
#      - name: Push new README back to the repo
#        run: |
#          set -x
#          if [[ "$(diff README-GENERATED.md README.md)" == "" ]]; then
#            echo "No diff detected in README. Skipping."
#            exit 0
#          fi
#          git config user.name "Automated"
#          git config user.email "actions@users.noreply.github.com"
#          mv README-GENERATED.md README.md
#          git add README.md
#          git commit -m "Regenerate README.md" || exit 0
#          git push
